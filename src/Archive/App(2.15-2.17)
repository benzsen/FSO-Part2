//Completed 2-15 to 2.17
//2.18* Not Completed
//Axios delete request not in contacts.js (Error to .then in App)

import React, { useState, useEffect} from 'react'
import contacts from "./services/contacts"
import axios from "axios"

const FilterInput = (props) => <div> Filter: <input onChange={props.handleFilterChange}/></div>

const PersonForm = (props) => {
  const addName = props.addName;
  const newName = props.newName;
  const newNumber = props.newNumber;
  const handleNameChange = props.handleNameChange;
  const handleNumberChange = props.handleNumberChange;

  return(
  <form onSubmit={addName}>
    <div>
      name: <input value={newName} onChange={handleNameChange}/>
    </div>
    <div>
      number: <input value={newNumber} onChange={handleNumberChange}/>
    </div>
    <div>
      <button type="submit">add</button>
    </div>
  </form>
  )
}

const DisplayName = (props) => {
    const persons=props.persons;
    const newFilter=props.newFilter.toLowerCase();
    const triggerUpdateList=props.triggerUpdateList;

    const filteredData = persons.filter(person => person.name.toLowerCase().substring(0,newFilter.length)===newFilter);

    //Cannot Export this since the setPerson state is needed
    const deleteFunc = (id) =>{
        if(window.confirm("Are you sure you want to delete?")){
        return(
          axios.delete("http://localhost:3001/persons/"+id)
          .then(res=>triggerUpdateList(res))
      )}}

    const data = filteredData.map(person =>{
      return(
        <p key={person.name}>
          {person.name} {person.number+" "}
          <button onClick={()=>{deleteFunc(person.id)}}>delete</button>
        </p>
      )})
    return <div>{data}</div>
}

const App = () => {
  const [ persons, setPersons ] = useState([])
  const [ newName, setNewName ] = useState('')
  const [ newNumber, setNewNumber] = useState('')
  const [ newFilter, setNewFilter] = useState("")
  const [ updateList, triggerUpdateList] = useState("") //Used to update when adding/deleting

  const addName = (event) => {
    event.preventDefault();
    let name=newName;
    let number=newNumber;
    let duplicateCheck = persons.find(person => person["name"].toLowerCase() === name.toLowerCase());

    if(duplicateCheck!==undefined){
      alert(newName + " is already taken. Would you like to update this contact?");
    }
    else {
      setPersons(persons.concat({name,number}));
      contacts.create({name,number})
        .then(res => triggerUpdateList(res))
    }
  }

  const handleNameChange = (event) => setNewName(event.target.value);
  const handleNumberChange = (event) => setNewNumber(event.target.value);
  const handleFilterChange = (event) => setNewFilter(event.target.value);

  useEffect(()=>{
    contacts.getAll()
    .then(response => {
      setPersons(response.data);
    })
  },[updateList])

  return (
    <div>
      <h2>Phonebook</h2>
      <FilterInput handleFilterChange={handleFilterChange}/>
      <h3>Add a new</h3>
      <PersonForm
        addName={addName}
        newName={newName}
        newNumber={newNumber}
        handleNameChange={handleNameChange}
        handleNumberChange={handleNumberChange}/>
      <h3>Numbers</h3>
      <DisplayName
        persons={persons}
        newFilter={newFilter}
        triggerUpdateList={triggerUpdateList}
        />
    </div>
  )
}

export default App
